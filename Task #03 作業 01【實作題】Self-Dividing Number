a, b = input("請輸入正整數："), input("請輸入正整數：") 

def isSelfDividing(a, b, show_result=False): # 判斷 n 是否為自除數
    # 定義一個內部函式，用來顯示訊息
    def show_msg(msg):
        if show_result:
            print(msg)

    def get_digits(num):
        return [int(i) for i in str(num)]
        # print(num) # 測試用

    has_error = False  # 新增一個標誌變數

    # 分別處理 a 的轉換
    try:
        a = int(a)
        if a < 1:
            show_msg(f"所輸入的 {a} 是整數，但不是正整數，請重新輸入")
            has_error = True
    except ValueError:
        show_msg(f"所輸入的 {a} 不是整數，請重新輸入")
        has_error = True
        
    # 分別處理 b 的轉換
    try:
        b = int(b)
        if b < 1:
            show_msg(f"所輸入的 {b} 是整數，但不是正整數，請重新輸入")
            has_error = True
    except ValueError:
        show_msg(f"所輸入的 {b} 不是整數，請重新輸入")
        has_error = True

    # 如果 a 大於 b，則交換 a 和 b
    if a > b:
        a, b = b, a

    # 如果有轉換錯誤，直接返回
    if has_error:
        return False        

    n = []
    for i in range(a, b+1): # a~b之間的數字 
        digits = get_digits(i) 

        if 0 in digits:  # 如果含有 0，直接跳過（因為不能除以 0）
            continue     # 跳過這個數字，檢查下一個

        is_self_dividing = True
        for digit in digits: 
            if i % digit != 0:
                is_self_dividing = False
                break # 效率考量：一旦發現一個位數不能整除這個數，就不需要再檢查其他位數了

        if is_self_dividing:
            n.append(i) # 將自除數加入列表
    return n # 全部檢查完才返回
    
n = isSelfDividing(a, b, True)
print(n)

def diff(): # 回傳小於 n 的質數：2 到 n 之間的所有質數
    try:
        if type(n) == list:
            if len(n) <= 1:  # 如果列表長度不足以計算差值
                return False

            n.reverse() # 先將列表反轉，以從大到小排序
            differences = [] # 儲存差值
            pairs = []       # 儲存數字對
            for i in range(len(n)-1):
                diff = n[i] - n[i+1] # 計算相鄰數字的差        
                differences.append(diff)
                pairs.append((n[i+1], n[i]))  # 儲存較小的數在前
            # 找出最大差值的索引
            max_diff_index = differences.index(max(differences))
            # 回傳對應的數字對
            return pairs[max_diff_index]
        else: # 當 n 不是列表時返回 False
            return False
    except ValueError:
        return False    

f = diff() 
print(f) 

# ================================================

使用範例：
如果輸入 11、20
n = [11, 12, 15]
reverse 後 n = [15, 12, 11]
len(n)-1 = 2，所以 range(len(n)-1) 產生 [0, 1]
當 i = 0：n[0]-n[1] = 15-12 = 3
當 i = 1：n[1]-n[2] = 12-11 = 1
differences = [3, 1]
pairs = [(12, 15), (11, 12)]
最大差值 3 對應的索引是 0
所以回傳 pairs[0]，也就是 (12, 15)
這樣修改後：
輸出會是一個 tuple
tuple 中的數字是按照從小到大排序
這兩個數字的差就是最大差值
格式為 (較小的數, 較大的數)
